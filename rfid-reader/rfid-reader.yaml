substitutions:
  name: rfid-reader
  friendly_name: RFID Reader

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: true
  project:
    name: apeeters.rfid-reader
    version: "1.0"
  platform: ESP8266
  board: d1_mini_lite

  on_boot:
    priority: -10
    then:
      - wait_until:
          api.connected:
      - logger.log: API is connected!
      - rtttl.play: "success:d=24,o=5,b=100:c,g,b"

dashboard_import:
  package_import_url: github://apeeters/esphome-firmware/rfid-reader/rfid-reader.yaml

switch:
  - platform: template
    name: "Buzzer Enabled"
    id: buzzer_enabled
    icon: mdi:volume-high
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config

wifi:
  ap:

api:
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play: !lambda 'return song_str;'

logger:

ota:
  - platform: esphome

binary_sensor:
  - platform: status
    name: "Status"
    entity_category: diagnostic

output:
  - platform: esp8266_pwm
    pin: D7
    id: buzzer
    frequency: 2000 Hz

i2c:
  sda: D2
  scl: D1

globals:
  - id: source
    type: std::string
  - id: url
    type: std::string
  - id: info
    type: std::string

pn532_i2c:
  on_tag:
    then:
      - lambda: |-
          id(source)="";
          id(url)="";
          id(info)="";
          if (tag.has_ndef_message()) {
            auto message = tag.get_ndef_message();
            auto records = message->get_records();
            for (auto &record : records) {
              std::string payload = record->get_payload();
              std::string type = record->get_type();
              size_t hass = payload.find("https://www.home-assistant.io/tag/");
              size_t applemusic = payload.find("https://music.apple.com");
              size_t spotify = payload.find("https://open.spotify.com");
              size_t sonos = payload.find("sonos-2://");
          
              if (type == "U" and hass != std::string::npos ) {
                ESP_LOGD("tagreader", "Found Home Assistant tag NDEF");
                id(source)="hass";
                id(url)=payload;
                id(info)=payload.substr(hass + 34);
              }
              else if (type == "U" and applemusic != std::string::npos ) {
                ESP_LOGD("tagreader", "Found Apple Music tag NDEF");
                id(source)="amusic";
                id(url)=payload;
              }
              else if (type == "U" and spotify != std::string::npos ) {
                ESP_LOGD("tagreader", "Found Spotify tag NDEF");
                id(source)="spotify";
                id(url)=payload;
              }
              else if (type == "U" and sonos != std::string::npos ) {
                ESP_LOGD("tagreader", "Found Sonos app tag NDEF");
                id(source)="sonos";
                id(url)=payload;
              }
              else if (type == "T" ) {
                ESP_LOGD("tagreader", "Found music info tag NDEF");
                id(info)=payload;
              }
              else if ( id(source)=="" ) {
                id(source)="uid";
              }
            }
          }
          else {
            id(source)="uid";
          }

      - if:
          condition:
            lambda: 'return ( id(source)=="uid" );'
          then:
            - homeassistant.tag_scanned: !lambda |-
                ESP_LOGD("tagreader", "No HA NDEF, using UID");
                return x;
          else:
            - if:
                condition:
                  lambda: 'return ( id(source)=="hass" );'
                then:
                  - homeassistant.tag_scanned: !lambda 'return id(info);'
                else:
                  - homeassistant.event:
                      event: esphome.music_tag
                      data:
                        reader: !lambda |-
                          return App.get_name().c_str();
                        source: !lambda |-
                          return id(source);
                        url: !lambda |-
                          return id(url);
                        info: !lambda |-
                          return id(info);

      - if:
          condition:
            switch.is_on: buzzer_enabled
          then:
            - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
  on_tag_removed:
    then:
      - homeassistant.event:
          event: esphome.tag_removed

rtttl:
  output: buzzer

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    entity_category: diagnostic

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: diagnostic
